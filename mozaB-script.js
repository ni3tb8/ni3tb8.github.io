const ledDisplay = document.getElementById("ledDisplay");
        const cols = 140;
        const rows = 24;
        const alignments = ["left", "center", "right"];
        let currentAlignments = [0, 0, 0]; // 0 - lewo, 1 - środek, 2 - prawo
        let invertedRows = [false, false, false]; // Śledzenie inwersji dla każdego wiersza
        let isFullScreenInverted = false; // Globalna inwersja całego wyświetlacza

        const charMap = {
    "A": [
        "000000",
        "011110",
        "110011",
        "110011",
        "110011",
        "110011",
        "111111",
        "110011",
        "110011",
        "110011",
        "000000",
        "000000"
    ],
    "B": [
        "000000",
        "111110",
        "110011",
        "110011",
        "110011",
        "111110",
        "110011",
        "110011",
        "110011",
        "111110",
        "000000",
        "000000"
    ],
    "C": [
        "000000",
        "011110",
        "110011",
        "110000",
        "110000",
        "110000",
        "110000",
        "110000",
        "110011",
        "011110",
        "000000",
        "000000"
    ],
    "D": [
        "000000",
        "111110",
        "110011",
        "110011",
        "110011",
        "110011",
        "110011",
        "110011",
        "110011",
        "111110",
        "000000",
        "000000"
    ],
    "E": [
        "000000",
        "111111",
        "110000",
        "110000",
        "110000",
        "111100",
        "110000",
        "110000",
        "110000",
        "111111",
        "000000",
        "000000"
    ],
    "F": [
        "000000",
        "111111",
        "110000",
        "110000",
        "110000",
        "111100",
        "110000",
        "110000",
        "110000",
        "110000",
        "000000",
        "000000"
    ],
    "G": [
        "000000",
        "011110",
        "110011",
        "110000",
        "110000",
        "110111",
        "110011",
        "110011",
        "110011",
        "011110",
        "000000",
        "000000"
    ],
    "H": [
        "000000",
        "110011",
        "110011",
        "110011",
        "110011",
        "111111",
        "110011",
        "110011",
        "110011",
        "110011",
        "000000",
        "000000"
    ],
    "I": [
        "00",
        "11",
        "11",
        "11",
        "11",
        "11",
        "11",
        "11",
        "11",
        "11",
        "00",
        "00"
    ],
    "J": [
        "000000",
        "111111",
        "000011",
        "000011",
        "000011",
        "000011",
        "000011",
        "000011",
        "110011",
        "011110",
        "000000",
        "000000"
    ],
    "K": [
        "000000",
        "110011",
        "110011",
        "110110",
        "111100",
        "111000",
        "111100",
        "110110",
        "110011",
        "110011",
        "000000",
        "000000"
    ],
    "L": [
        "000000",
        "110000",
        "110000",
        "110000",
        "110000",
        "110000",
        "110000",
        "110000",
        "110000",
        "111111",
        "000000",
        "000000"
    ],
    "M": [
        "0000000",
        "1100011",
        "1110111",
        "1111111",
        "1101011",
        "1101011",
        "1100011",
        "1100011",
        "1100011",
        "1100011",
        "0000000",
        "0000000"
    ],
    "N": [
        "0000000",
        "1100011",
        "1110011",
        "1110011",
        "1111011",
        "1101011",
        "1101111",
        "1100111",
        "1100111",
        "1100011",
        "0000000",
        "0000000"
    ],
    "O": [
        "000000",
        "011110",
        "110011",
        "110011",
        "110011",
        "110011",
        "110011",
        "110011",
        "110011",
        "011110",
        "000000",
        "000000"
    ],
    "P": [
        "000000",
        "111110",
        "110011",
        "110011",
        "110011",
        "111110",
        "110000",
        "110000",
        "110000",
        "110000",
        "000000",
        "000000"
    ],
    "Q": [
        "000000",
        "011110",
        "110011",
        "110011",
        "110011",
        "110011",
        "110011",
        "110101",
        "110010",
        "011101",
        "000000",
        "000000"
    ],
    "R": [
        "000000",
        "111110",
        "110011",
        "110011",
        "110011",
        "111110",
        "111100",
        "110110",
        "110110",
        "110011",
        "000000",
        "000000"
    ],
    "S": [
        "000000",
        "011110",
        "110011",
        "110000",
        "011000",
        "001100",
        "000110",
        "000011",
        "110011",
        "011110",
        "000000",
        "000000"
    ],
    "T": [
        "000000",
        "111111",
        "001100",
        "001100",
        "001100",
        "001100",
        "001100",
        "001100",
        "001100",
        "001100",
        "000000",
        "000000"
    ],
    "U": [
        "000000",
        "110011",
        "110011",
        "110011",
        "110011",
        "110011",
        "110011",
        "110011",
        "110011",
        "011110",
        "000000",
        "000000"
    ],
    "V": [
        "000000",
        "110011",
        "110011",
        "110011",
        "110011",
        "110011",
        "110011",
        "110011",
        "011110",
        "001100",
        "000000",
        "000000"
    ],
    "W": [
        "0000000",
        "1100011",
        "1100011",
        "1100011",
        "1100011",
        "1101011",
        "1101011",
        "1111111",
        "1110111",
        "1100011",
        "0000000",
        "0000000"
    ],
    "X": [
        "0000000",
        "1100011",
        "1100011",
        "1100011",
        "0110110",
        "0011100",
        "0110110",
        "1100011",
        "1100011",
        "1100011",
        "0000000",
        "0000000"
    ],
    "Y": [
        "000000",
        "110011",
        "110011",
        "110011",
        "110011",
        "011110",
        "001100",
        "001100",
        "001100",
        "001100",
        "000000",
        "000000"
    ],
    "Z": [
        "000000",
        "111111",
        "000011",
        "000011",
        "000110",
        "001100",
        "011000",
        "110000",
        "110000",
        "111111",
        "000000",
        "000000"
    ],
    "a": [
        "000000",
        "000000",
        "000000",
        "000000",
        "011110",
        "000011",
        "011111",
        "110011",
        "110011",
        "011111",
        "000000",
        "000000"
    ],
    "b": [
        "000000",
        "110000",
        "110000",
        "110000",
        "111110",
        "110011",
        "110011",
        "110011",
        "110011",
        "011110",
        "000000",
        "000000"
    ],
    "c": [
        "000000",
        "000000",
        "000000",
        "000000",
        "011110",
        "110011",
        "110000",
        "110000",
        "110011",
        "011110",
        "000000",
        "000000"
    ],
    "d": [
        "000000",
        "000011",
        "000011",
        "000011",
        "011111",
        "110011",
        "110011",
        "110011",
        "110011",
        "011111",
        "000000",
        "000000"
    ],
    "e": [
        "000000",
        "000000",
        "000000",
        "000000",
        "011110",
        "110011",
        "110011",
        "111110",
        "110000",
        "011110",
        "000000",
        "000000"
    ],
    "f": [
        "00000",
        "00111",
        "01100",
        "01100",
        "01100",
        "11110",
        "01100",
        "01100",
        "01100",
        "01100",
        "01100",
        "01100"
    ],
    "g": [
        "000000",
        "000000",
        "000000",
        "000000",
        "011111",
        "110011",
        "110011",
        "110011",
        "011111",
        "000011",
        "000011",
        "011110"
    ],
    "h": [
        "000000",
        "110000",
        "110000",
        "110000",
        "111110",
        "110011",
        "110011",
        "110011",
        "110011",
        "110011",
        "000000",
        "000000"
    ],
    "i": [
        "000",
        "110",
        "000",
        "000",
        "110",
        "110",
        "110",
        "110",
        "110",
        "011",
        "000",
        "000"
    ],
    "j": [
        "000",
        "011",
        "000",
        "000",
        "011",
        "011",
        "011",
        "011",
        "011",
        "011",
        "011",
        "110"
    ],
    "k": [
        "000000",
        "110000",
        "110000",
        "110000",
        "110011",
        "110110",
        "111100",
        "111100",
        "110110",
        "110011",
        "000000",
        "000000"
    ],
    "l": [
        "000",
        "110",
        "110",
        "110",
        "110",
        "110",
        "110",
        "110",
        "110",
        "011",
        "000",
        "000"
    ],
    "m": [
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "11101110",
        "11011011",
        "11011011",
        "11011011",
        "11011011",
        "11011011",
        "00000000",
        "00000000"
    ],
    "n": [
        "000000",
        "000000",
        "000000",
        "000000",
        "110110",
        "111011",
        "110011",
        "110011",
        "110011",
        "110011",
        "000000",
        "000000"
    ],
    "o": [
        "000000",
        "000000",
        "000000",
        "000000",
        "011110",
        "110011",
        "110011",
        "110011",
        "110011",
        "011110",
        "000000",
        "000000"
    ],
    "p": [
        "000000",
        "000000",
        "000000",
        "000000",
        "111110",
        "110011",
        "110011",
        "110011",
        "111110",
        "110000",
        "110000",
        "110000"
    ],
    "q": [
        "0000000",
        "0000000",
        "0000000",
        "0000000",
        "0111110",
        "1100110",
        "1100110",
        "1100110",
        "0111110",
        "0000110",
        "0000111",
        "0000110"
    ],
    "r": [
        "000000",
        "000000",
        "000000",
        "000000",
        "110110",
        "111011",
        "110000",
        "110000",
        "110000",
        "110000",
        "000000",
        "000000"
    ],
    "s": [
        "00000",
        "00000",
        "00000",
        "00000",
        "01111",
        "11000",
        "01100",
        "00110",
        "00011",
        "11110",
        "00000",
        "00000"
    ],
    "t": [
        "00000",
        "01100",
        "01100",
        "01100",
        "11110",
        "01100",
        "01100",
        "01100",
        "01100",
        "00111",
        "00000",
        "00000"
    ],
    "u": [
        "000000",
        "000000",
        "000000",
        "000000",
        "110011",
        "110011",
        "110011",
        "110011",
        "110111",
        "011011",
        "000000",
        "000000"
    ],
    "v": [
        "000000",
        "000000",
        "000000",
        "000000",
        "110011",
        "110011",
        "110011",
        "110011",
        "011110",
        "001100",
        "000000",
        "000000"
    ],
    "w": [
        "0000000",
        "0000000",
        "0000000",
        "0000000",
        "1100011",
        "1100011",
        "1101011",
        "1111111",
        "1110111",
        "1100011",
        "0000000",
        "0000000"
    ],
    "x": [
        "000000",
        "000000",
        "000000",
        "000000",
        "110011",
        "110011",
        "011110",
        "011110",
        "110011",
        "110011",
        "000000",
        "000000"
    ],
    "y": [
        "000000",
        "000000",
        "000000",
        "000000",
        "110011",
        "110011",
        "110011",
        "110011",
        "011111",
        "000011",
        "000011",
        "011110"
    ],
    "z": [
        "00000",
        "00000",
        "00000",
        "00000",
        "11111",
        "00011",
        "00110",
        "01100",
        "11000",
        "11111",
        "00000",
        "00000"
    ],
    "\u0104": [
        "000000",
        "011110",
        "110011",
        "110011",
        "110011",
        "110011",
        "111111",
        "110011",
        "110011",
        "110010",
        "000011",
        "000000"
    ],
    "\u0106": [
        "000010",
        "011110",
        "110111",
        "110000",
        "110000",
        "110000",
        "110000",
        "110000",
        "110011",
        "011110",
        "000000",
        "000000"
    ],
    "\u0118": [
        "000000",
        "111111",
        "110000",
        "110000",
        "110000",
        "111100",
        "110000",
        "110000",
        "110000",
        "111111",
        "001000",
        "001100"
    ],
    "\u0141": [
        "000000",
        "110000",
        "110000",
        "110000",
        "110100",
        "111000",
        "110000",
        "110000",
        "110000",
        "111111",
        "000000",
        "000000"
    ],
    "\u0143": [
        "0000100",
        "1101011",
        "1110011",
        "1110011",
        "1111011",
        "1101011",
        "1101111",
        "1100111",
        "1100111",
        "1100011",
        "0000000",
        "0000000"
    ],
    "\u00d3": [
        "000100",
        "011110",
        "111011",
        "110011",
        "110011",
        "110011",
        "110011",
        "110011",
        "110011",
        "011110",
        "000000",
        "000000"
    ],
    "\u0179": [
        "000100",
        "111111",
        "001011",
        "000011",
        "000110",
        "001100",
        "011000",
        "110000",
        "110000",
        "111111",
        "000000",
        "000000"
    ],
    "\u017b": [
        "000000",
        "111111",
        "000011",
        "000011",
        "000110",
        "111111",
        "011000",
        "110000",
        "110000",
        "111111",
        "000000",
        "000000"
    ],
    "\u0105": [
        "000000",
        "000000",
        "000000",
        "000000",
        "011110",
        "000011",
        "011111",
        "110011",
        "110011",
        "011111",
        "000010",
        "000100"
    ],
    "\u0107": [
        "000000",
        "000010",
        "000100",
        "000000",
        "011110",
        "110011",
        "110000",
        "110000",
        "110011",
        "011110",
        "000000",
        "000000"
    ],
    "\u0119": [
        "000000",
        "000000",
        "000000",
        "000000",
        "011110",
        "110011",
        "110011",
        "111110",
        "110000",
        "011110",
        "001000",
        "001100"
    ],
    "\u0142": [
        "0000",
        "0110",
        "0110",
        "0110",
        "0111",
        "0110",
        "1110",
        "0110",
        "0110",
        "0011",
        "0000",
        "0000"
    ],
    "\u0144": [
        "000000",
        "000010",
        "000100",
        "000000",
        "110110",
        "111011",
        "110011",
        "110011",
        "110011",
        "110011",
        "000000",
        "000000"
    ],
    "\u015b": [
        "00000",
        "00010",
        "00100",
        "00000",
        "01111",
        "11000",
        "01100",
        "00110",
        "00011",
        "11110",
        "00000",
        "00000"
    ],
    "\u017a": [
        "00000",
        "00010",
        "00100",
        "00000",
        "11111",
        "00011",
        "00110",
        "01100",
        "11000",
        "11111",
        "00000",
        "00000"
    ],
    "\u017c": [
        "00000",
        "00000",
        "00100",
        "00000",
        "11111",
        "00011",
        "00110",
        "01100",
        "11000",
        "11111",
        "00000",
        "00000"
    ],
    "\u00f3": [
        "000000",
        "000010",
        "000100",
        "000000",
        "011110",
        "110011",
        "110011",
        "110011",
        "110011",
        "011110",
        "000000",
        "000000"
    ],
    "\u015a": [
        "000010",
        "011110",
        "110111",
        "110000",
        "011000",
        "001100",
        "000110",
        "000011",
        "110011",
        "011110",
        "000000",
        "000000"
    ],
    "2": [
        "000000",
        "011110",
        "110011",
        "000011",
        "000110",
        "001100",
        "011000",
        "110000",
        "110000",
        "111111",
        "000000",
        "000000"
    ],
    "1": [
        "0000",
        "0011",
        "0111",
        "1111",
        "0011",
        "0011",
        "0011",
        "0011",
        "0011",
        "0011",
        "0000",
        "0000"
    ],
    "3": [
        "000000",
        "011110",
        "110011",
        "000011",
        "000011",
        "001110",
        "000011",
        "000011",
        "110011",
        "011110",
        "000000",
        "000000"
    ],
    "4": [
        "000000",
        "000011",
        "000111",
        "001111",
        "011011",
        "110011",
        "110011",
        "111111",
        "000011",
        "000011",
        "000000",
        "000000"
    ],
    "5": [
        "000000",
        "111111",
        "110000",
        "110000",
        "111110",
        "110011",
        "000011",
        "000011",
        "110011",
        "011110",
        "000000",
        "000000"
    ],
    "6": [
        "000000",
        "011110",
        "110011",
        "110000",
        "111110",
        "110011",
        "110011",
        "110011",
        "110011",
        "011110",
        "000000",
        "000000"
    ],
    "7": [
        "000000",
        "111111",
        "000011",
        "000011",
        "000011",
        "000110",
        "001100",
        "001100",
        "001100",
        "001100",
        "000000",
        "000000"
    ],
    "8": [
        "000000",
        "011110",
        "110011",
        "110011",
        "110011",
        "011110",
        "110011",
        "110011",
        "110011",
        "011110",
        "000000",
        "000000"
    ],
    "9": [
        "000000",
        "011110",
        "110011",
        "110011",
        "110011",
        "110011",
        "011111",
        "000011",
        "110011",
        "011110",
        "000000",
        "000000"
    ],
    "0": [
        "000000",
        "011110",
        "110011",
        "110011",
        "110011",
        "110011",
        "110011",
        "110011",
        "110011",
        "011110",
        "000000",
        "000000"
    ],
    "-": [
        "00000",
        "00000",
        "00000",
        "00000",
        "00000",
        "11111",
        "00000",
        "00000",
        "00000",
        "00000",
        "00000",
        "00000"
    ],
    "+": [
        "000000",
        "000000",
        "000000",
        "001100",
        "001100",
        "111111",
        "001100",
        "001100",
        "000000",
        "000000",
        "000000",
        "000000"
    ],
    "/": [
        "0000",
        "0011",
        "0011",
        "0011",
        "0110",
        "0110",
        "0110",
        "1100",
        "1100",
        "1100",
        "0000",
        "0000"
    ],
    ".": [
        "00",
        "00",
        "00",
        "00",
        "00",
        "00",
        "00",
        "00",
        "11",
        "11",
        "00",
        "00"
    ],
    ",": [
        "000",
        "000",
        "000",
        "000",
        "000",
        "000",
        "000",
        "000",
        "011",
        "011",
        "110",
        "000"
    ],
    "!": [
        "00",
        "11",
        "11",
        "11",
        "11",
        "11",
        "11",
        "00",
        "00",
        "11",
        "00",
        "00"
    ],
    ":": [
        "00",
        "00",
        "00",
        "11",
        "11",
        "00",
        "11",
        "11",
        "00",
        "00",
        "00",
        "00"
    ],
    "(": [
        "011",
        "110",
        "110",
        "110",
        "110",
        "110",
        "110",
        "110",
        "110",
        "110",
        "011",
        "000"
    ],
    ")": [
        "110",
        "011",
        "011",
        "011",
        "011",
        "011",
        "011",
        "011",
        "011",
        "011",
        "110",
        "000"
    ],
    "\"": [
        "00000",
        "11011",
        "11011",
        "10010",
        "00000",
        "00000",
        "00000",
        "00000",
        "00000",
        "00000",
        "00000",
        "00000"
    ],
    "'": [
        "00",
        "11",
        "11",
        "10",
        "00",
        "00",
        "00",
        "00",
        "00",
        "00",
        "00",
        "00"
    ],
    " ": [
        "000",
        "000",
        "000",
        "000",
        "000",
        "000",
        "000",
        "000",
        "000",
        "000",
        "000",
        "000"
    ],
    "@": [
        "000000",
        "000000",
        "000000",
        "000100",
        "000110",
        "111111",
        "000110",
        "000100",
        "000000",
        "000000",
        "000000",
        "000000"
    ]
};

const charMapAlt = {
    "A": [
        "0000",
        "0000",
        "0110",
        "1001",
        "1001",
        "1111",
        "1001",
        "1001",
        "1001",
        "0000",
        "0000",
        "0000"
    ],
    "B": [
        "0000",
        "0000",
        "1110",
        "1001",
        "1001",
        "1110",
        "1001",
        "1001",
        "1110",
        "0000",
        "0000",
        "0000"
    ],
    "C": [
        "0000",
        "0000",
        "0110",
        "1001",
        "1000",
        "1000",
        "1000",
        "1001",
        "0110",
        "0000",
        "0000",
        "0000"
    ],
    "\u0104": [
        "0000",
        "0000",
        "0110",
        "1001",
        "1001",
        "1111",
        "1001",
        "1001",
        "1001",
        "0010",
        "0000",
        "0000"
    ],
    "\u0106": [
        "0001",
        "0010",
        "0110",
        "1001",
        "1000",
        "1000",
        "1000",
        "1001",
        "0110",
        "0000",
        "0000",
        "0000"
    ],
    "D": [
        "0000",
        "0000",
        "1110",
        "1001",
        "1001",
        "1001",
        "1001",
        "1001",
        "1110",
        "0000",
        "0000",
        "0000"
    ],
    "E": [
        "0000",
        "0000",
        "1111",
        "1000",
        "1000",
        "1110",
        "1000",
        "1000",
        "1111",
        "0000",
        "0000",
        "0000"
    ],
    "\u0118": [
        "0000",
        "0000",
        "1111",
        "1000",
        "1000",
        "1110",
        "1000",
        "1000",
        "1111",
        "0001",
        "0000",
        "0000"
    ],
    "F": [
        "0000",
        "0000",
        "1111",
        "1000",
        "1000",
        "1110",
        "1000",
        "1000",
        "1000",
        "0000",
        "0000",
        "0000"
    ],
    "G": [
        "0000",
        "0000",
        "0110",
        "1001",
        "1000",
        "1011",
        "1001",
        "1001",
        "0110",
        "0000",
        "0000",
        "0000"
    ],
    "H": [
        "0000",
        "0000",
        "1001",
        "1001",
        "1001",
        "1111",
        "1001",
        "1001",
        "1001",
        "0000",
        "0000",
        "0000"
    ],
    "I": [
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "0"
    ],
    "J": [
        "0000",
        "0000",
        "1111",
        "0001",
        "0001",
        "0001",
        "0001",
        "1001",
        "0110",
        "0000",
        "0000",
        "0000"
    ],
    "K": [
        "0000",
        "0000",
        "1001",
        "1010",
        "1100",
        "1000",
        "1100",
        "1010",
        "1001",
        "0000",
        "0000",
        "0000"
    ],
    "L": [
        "0000",
        "0000",
        "1000",
        "1000",
        "1000",
        "1000",
        "1000",
        "1000",
        "1111",
        "0000",
        "0000",
        "0000"
    ],
    "\u0141": [
        "0000",
        "0000",
        "1000",
        "1000",
        "1010",
        "1100",
        "1000",
        "1000",
        "1111",
        "0000",
        "0000",
        "0000"
    ],
    "M": [
        "00000",
        "00000",
        "10001",
        "11011",
        "10101",
        "10001",
        "10001",
        "10001",
        "10001",
        "00000",
        "00000",
        "00000"
    ],
    "N": [
        "0000",
        "0000",
        "1001",
        "1101",
        "1011",
        "1001",
        "1001",
        "1001",
        "1001",
        "0000",
        "0000",
        "0000"
    ],
    "\u0143": [
        "0001",
        "0010",
        "1001",
        "1101",
        "1011",
        "1001",
        "1001",
        "1001",
        "1001",
        "0000",
        "0000",
        "0000"
    ],
    "O": [
        "0000",
        "0000",
        "0110",
        "1001",
        "1001",
        "1001",
        "1001",
        "1001",
        "0110",
        "0000",
        "0000",
        "0000"
    ],
    "P": [
        "0000",
        "0000",
        "1110",
        "1001",
        "1001",
        "1110",
        "1000",
        "1000",
        "1000",
        "0000",
        "0000",
        "0000"
    ],
    "R": [
        "0000",
        "0000",
        "1110",
        "1001",
        "1001",
        "1110",
        "1100",
        "1010",
        "1001",
        "0000",
        "0000",
        "0000"
    ],
    "S": [
        "0000",
        "0000",
        "0110",
        "1001",
        "1000",
        "0110",
        "0001",
        "1001",
        "0110",
        "0000",
        "0000",
        "0000"
    ],
    "\u015a": [
        "0001",
        "0010",
        "0110",
        "1001",
        "1000",
        "0110",
        "0001",
        "1001",
        "0110",
        "0000",
        "0000",
        "0000"
    ],
    "T": [
        "00000",
        "00000",
        "11111",
        "00100",
        "00100",
        "00100",
        "00100",
        "00100",
        "00100",
        "00000",
        "00000",
        "00000"
    ],
    "U": [
        "0000",
        "0000",
        "1001",
        "1001",
        "1001",
        "1001",
        "1001",
        "1001",
        "0110",
        "0000",
        "0000",
        "0000"
    ],
    "W": [
        "00000",
        "00000",
        "10001",
        "10001",
        "10001",
        "10001",
        "10101",
        "11011",
        "10001",
        "00000",
        "00000",
        "00000"
    ],
    "Y": [
        "00000",
        "00000",
        "10001",
        "10001",
        "01010",
        "00100",
        "00100",
        "00100",
        "00100",
        "00000",
        "00000",
        "00000"
    ],
    "Z": [
        "0000",
        "0000",
        "1111",
        "0001",
        "0010",
        "0100",
        "1000",
        "1000",
        "1111",
        "0000",
        "0000",
        "0000"
    ],
    "\u017b": [
        "0010",
        "0000",
        "1111",
        "0001",
        "0010",
        "0100",
        "1000",
        "1000",
        "1111",
        "0000",
        "0000",
        "0000"
    ],
    "\u0179": [
        "0001",
        "0010",
        "1111",
        "0001",
        "0010",
        "0100",
        "1000",
        "1000",
        "1111",
        "0000",
        "0000",
        "0000"
    ],
    ":": [
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0"
    ],
    ".": [
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0"
    ],
    ",": [
        "00",
        "00",
        "00",
        "00",
        "00",
        "00",
        "00",
        "00",
        "01",
        "10",
        "00",
        "00"
    ],
    " ": [
        "000",
        "000",
        "000",
        "000",
        "000",
        "000",
        "000",
        "000",
        "000",
        "000",
        "000",
        "000"
    ],
    "\u00d3": [
        "0001",
        "0010",
        "0110",
        "1001",
        "1001",
        "1001",
        "1001",
        "1001",
        "0110",
        "0000",
        "0000",
        "0000"
    ]
};

// Dla wierszy 0 i 1 (czyli wiersze 1 i 2) – domyślnie wyłączone
let extraEnabled = [false, false];
let extraWidths = [0, 0]; // dla wierszy 0 i 1

function toggleExtra(rowIndex) {
    let btn = document.getElementById("extraToggleBtn" + rowIndex);
    let extraInput = document.getElementById("extraText" + (rowIndex + 1));
    extraEnabled[rowIndex] = !extraEnabled[rowIndex];
    if (extraEnabled[rowIndex]) {
        extraInput.style.display = "inline-block";
        btn.classList.remove("fa-square");
        btn.classList.add("fa-square-binary");
    } else {
        extraInput.style.display = "none";
        extraInput.value = "";
        btn.classList.remove("fa-square-binary");
        btn.classList.add("fa-square");
    }
}

function getTextWidth(text, charMapRef) {
    let width = 0;
    for (const char of text) {
        if (charMapRef[char]) {
            width += charMapRef[char][0].length + 1; // szerokość znaku + odstęp
        }
    }
    return width;
}

function renderExtraText(text, verticalOffset) {
    let extraCharMap = fonts["default"];
    let colOffset = 1; // zaczynamy od kolumny 1
    for (const char of text) {
        if (extraCharMap[char]) {
            const charData = extraCharMap[char];
            for (let row = 0; row < charData.length; row++) {
                for (let col = 0; col < charData[row].length; col++) {
                    let pixelCol = colOffset + col;
                    const index = (verticalOffset + row) * cols + pixelCol;
                    if (index < pixelElements.length) {
                        const pixel = pixelElements[index];
                        pixel.classList.remove("lit", "litCZ", "litWH");
                        if (charData[row][col] === "1") {
                            pixel.classList.add("lit");
                        }
                    }
                }
            }
            colOffset += extraCharMap[char][0].length + 1;
        }
    }
    return colOffset; // zwraca szerokość strefy
}


const fonts = {
    default: charMap,
    alt: charMapAlt
};

let currentFonts = ["default", "default", "default"];
let currentColors = ["lit", "lit", "lit"];

function toggleFont(rowIndex) {
    let btn = document.getElementById("fontBtn" + rowIndex);
    if (currentFonts[rowIndex] === "default") {
        currentFonts[rowIndex] = "alt";
        // Zmieniamy klasę ikony: usuwamy fa-a, dodajemy fa-b
        btn.classList.remove("fa-a");
        btn.classList.add("fa-b");
    } else {
        currentFonts[rowIndex] = "default";
        btn.classList.remove("fa-b");
        btn.classList.add("fa-a");
    }
}

function toggleColor(rowIndex) {
    let btn = document.getElementById("colorBtn" + rowIndex);
    if (currentColors[rowIndex] === "lit") {
        currentColors[rowIndex] = "litCZ";
        // Aktualizujemy kolor ikony (przyjmujemy, że ikona ma kolor odpowiadający klasie)
        btn.style.color = "rgb(245,24,24)";
    } else if (currentColors[rowIndex] === "litCZ") {
        currentColors[rowIndex] = "litWH";
        btn.style.color = "rgb(238,238,238)";
    } else if (currentColors[rowIndex] === "litWH") {
        currentColors[rowIndex] = "lit";
        btn.style.color = "rgb(245,156,24)";
    }
}

// Globalna tablica przechowująca referencje do pikseli
let pixelElements = [];

function createPixels() {
    for (let i = 0; i < rows * cols; i++) {
        const pixel = document.createElement("div");
        pixel.classList.add("pixel");
        ledDisplay.appendChild(pixel);
        pixelElements.push(pixel);
    }
}

function updateDisplay() {
    // Czyścimy wszystkie piksele (usuwamy klasy koloru)
    pixelElements.forEach(pixel => pixel.classList.remove("lit", "litCZ", "litWH"));

    // Wiersz 0 (wiersz 1)
    let baseOffset0 = 0;
    if (extraEnabled[0]) {
        let extraText = document.getElementById("extraText1").value;
        // Obliczamy szerokość dodatkowej strefy – używamy domyślnej charMap
        extraWidths[0] = getTextWidth(extraText, fonts["default"]);
        // Możemy dodać dodatkowy odstęp, np. 1 kolumnę:
        baseOffset0 = extraWidths[0] + 1;
        // Renderujemy dodatkową strefę na wierszu 0, zaczynając od kolumny 0
        renderExtraText(extraText, 0);
    } else {
        extraWidths[0] = 0;
        baseOffset0 = 0;
    }
    if (scrollingIntervals[0]) {
        renderRow(0, '', 0, currentAlignments[0], invertedRows[0], baseOffset0);
        renderText(scrollingTexts[0], 0, currentAlignments[0], invertedRows[0], scrollOffsets[0], 0, baseOffset0);
    } else {
        let text1 = document.getElementById("hiddenText1").value;
        renderRow(0, text1, 0, currentAlignments[0], invertedRows[0], baseOffset0);
        renderText(text1, 0, currentAlignments[0], invertedRows[0], 0, 0, baseOffset0);
    }

    // Wiersz 1 (wiersz 2)
    let baseOffset1 = 0;
    if (extraEnabled[1]) {
        let extraText = document.getElementById("extraText2").value;
        extraWidths[1] = getTextWidth(extraText, fonts["default"]);
        baseOffset1 = extraWidths[1] + 1;
        // Dla wiersza 1, vertical offset wynosi 12
        renderExtraText(extraText, 12);
    } else {
        extraWidths[1] = 0;
        baseOffset1 = 0;
    }
    if (scrollingIntervals[1]) {
        renderRow(1, '', 12, currentAlignments[1], invertedRows[1], baseOffset1);
        renderText(scrollingTexts[1], 12, currentAlignments[1], invertedRows[1], scrollOffsets[1], 1, baseOffset1);
    } else {
        let text2 = document.getElementById("hiddenText2").value;
        renderRow(1, text2, 12, currentAlignments[1], invertedRows[1], baseOffset1);
        renderText(text2, 12, currentAlignments[1], invertedRows[1], 0, 1, baseOffset1);
    }

    // Wiersz 2 (wiersz 3) – bez dodatkowej strefy, więc baseOffset = 0
    if (scrollingIntervals[2]) {
        renderRow(2, '', 6, currentAlignments[2], invertedRows[2], 0);
        renderText(scrollingTexts[2], 6, currentAlignments[2], invertedRows[2], scrollOffsets[2], 2, 0);
    } else {
        let text3 = document.getElementById("hiddenText3").value;
        renderRow(2, text3, 6, currentAlignments[2], invertedRows[2], 0);
        renderText(text3, 6, currentAlignments[2], invertedRows[2], 0, 2, 0);
    }

    if (isFullScreenInverted) {
        pixelElements.forEach(pixel => pixel.classList.toggle("lit"));
    }
}


// Funkcja do synchronizacji tekstu z widocznych inputów do ukrytych
function syncHiddenInputs() {
    document.getElementById("hiddenText1").value = document.getElementById("text1").value;
    document.getElementById("hiddenText2").value = document.getElementById("text2").value;
    document.getElementById("hiddenText3").value = document.getElementById("text3").value;
}

function getMaxVisibleChars(text, rowOffset = 0, currentCharMap) {
    let widthUsed = rowOffset; // Początkowe przesunięcie
    let maxChars = 0;

    for (const char of text) {
        if (currentCharMap[char]) {
            const charWidth = currentCharMap[char][0].length + 1; // Szerokość znaku + odstęp
            if (widthUsed + charWidth > cols) break;
            widthUsed += charWidth;
            maxChars++;
        }
    }
    return maxChars;
}


function renderRow(rowIndex, text, verticalOffset, alignment, invertRow, baseOffset = 0) {
    if (invertRow && rowIndex !== 2) {
        invertWholeRow(verticalOffset);
    }
    const currentCharMap = fonts[currentFonts[rowIndex]];
    const maxChars = getMaxVisibleChars(text, 0, currentCharMap); // nie uwzględniamy extra – main text będzie skalowany względem dostępnego miejsca
    renderText(text.slice(0, maxChars), verticalOffset, alignment, invertRow, 0, rowIndex, baseOffset);
}

function clearDisplay() {
    document.querySelectorAll(".pixel").forEach(pixel => pixel.classList.remove("lit"));
}

function renderText(text, verticalOffset, alignment, invert, scrollOffset = 0, rowIndex, baseOffset = 0) {
    let selectedFont = currentFonts[rowIndex];
    let currentCharMap = fonts[selectedFont];

    let textWidth = text.split("").reduce((acc, char) =>
        acc + (currentCharMap[char] ? currentCharMap[char][0].length + 1 : 0), 0);

    let availableWidth = cols - baseOffset; // dostępna szerokość dla głównego tekstu
    let colOffset;
    if (textWidth > availableWidth) {
        colOffset = baseOffset + (availableWidth - scrollOffset);
    } else {
        if (alignment === 1) {
            colOffset = baseOffset + Math.floor((availableWidth - textWidth) / 2) + 1;
        } else if (alignment === 2) {
            colOffset = baseOffset + (availableWidth - textWidth);
        } else {
            colOffset = baseOffset + 1;
        }
    }

    for (const char of text) {
        if (currentCharMap[char]) {
            const charData = currentCharMap[char];
            for (let row = 0; row < charData.length; row++) {
                for (let col = 0; col < charData[row].length; col++) {
                    let pixelCol = colOffset + col;
                    // Zmiana warunku – tekst rysowany od kolumny baseOffset+1
                    if (pixelCol >= baseOffset + 1 && pixelCol < (cols - 1)) {
                        const index = (verticalOffset + row) * cols + pixelCol;
                        if (index < pixelElements.length) {
                            const pixel = pixelElements[index];
                            pixel.classList.remove("lit", "litCZ", "litWH");
                            if ((charData[row][col] === "1") !== invert) {
                                pixel.classList.add(currentColors[rowIndex]);
                            }
                        }
                    }
                }
            }
            colOffset += currentCharMap[char][0].length + 1;
        }
    }
}





function invertWholeRow(rowOffset) {
    for (let col = 0; col < cols; col++) {
        for (let row = 0; row < 12; row++) {
            const index = (rowOffset + row) * cols + col;
            if (index < rows * cols) {
                document.querySelectorAll(".pixel")[index].classList.toggle("lit");
            }
        }
    }
}

// Funkcja zmieniająca wyrównanie
function toggleAlignment(row) {
    currentAlignments[row] = (currentAlignments[row] + 1) % 3;
    
    const icons = ["fa-align-left", "fa-align-center", "fa-align-right"];
    const button = document.querySelectorAll(".alignment-button")[row];

    // Usuń wszystkie ikony i dodaj nową
    button.classList.remove("fa-align-left", "fa-align-center", "fa-align-right");
    button.classList.add(icons[currentAlignments[row]]);
}

// Zmiana wyrównania tekstu jest teraz zatwierdzana dopiero po kliknięciu przycisku zatwierdzającego
document.querySelector(".zatwierdz").addEventListener("click", function() {
    updateDisplay();
});

function toggleInvert(row) {
    if (row === 2) {
        isFullScreenInverted = !isFullScreenInverted;
    } else {
        invertedRows[row] = !invertedRows[row];
    }

    // Pobranie odpowiedniego przycisku
    const buttons = document.querySelectorAll(".invert-button");
    const button = buttons[row];

    // Przełączanie ikon
    button.classList.toggle("fa-regular");
    button.classList.toggle("fa-solid");
}


function clearInputs() {
    document.getElementById("text1").value = "";
    document.getElementById("text2").value = "";
    document.getElementById("text3").value = "";

    syncHiddenInputs();
}

document.addEventListener("DOMContentLoaded", () => {
    // Funkcja do wyświetlenia "Dzień dobry" w 3 wierszu na 3 sekundy
    function displayGreeting() {
        const text3 = "Dzień dobry!";
        const hiddenText3 = document.getElementById("hiddenText3");

        // Ustawienie "Dzień dobry" w ukrytym inpucie
        hiddenText3.value = text3;

        // Wymuszenie wyśrodkowanego wyrównania dla 3 wiersza
        currentAlignments[2] = 1; // 1 oznacza wyśrodkowanie (dla alignments 0: left, 1: center, 2: right)

        // Odświeżenie wyświetlacza, aby wyświetlić "Dzień dobry"
        updateDisplay();

        // Ukrycie tekstu po 3 sekundach
        setTimeout(() => {
            hiddenText3.value = ""; // Wyczyść tekst
            currentAlignments[2] = 0;
            toggleInvert(2)
            updateDisplay(); // Zaktualizuj wyświetlacz
            //toggleAutoMode();
        }, 2000); // 3000ms = 3 sekundy
    }

    // Opóźnienie o 1 sekundę przed wywołaniem displayGreeting
    setTimeout(() => {
        toggleInvert(2)
        displayGreeting();
    }, 500); // 1000ms = 1 sekunda
});

let isAutoMode = false; // Flaga trybu automatycznego
let savedText1 = ''; // Zmienna przechowująca zapisany tekst dla hiddenText1
let savedText2 = ''; // Zmienna przechowująca zapisany tekst dla hiddenText2
let savedAlignments = [0, 0, 0]; // Tablica do przechowywania wyrównań (1, 2, 3 wierszy)

// Funkcja do włączania/wyłączania trybu automatycznego
function toggleAutoMode() {
    isAutoMode = !isAutoMode;
    
    const buttonIcon = document.querySelector("#auto-mode-button i");
    
    // Zmieniamy ikonę przycisku
    if (isAutoMode) {
        buttonIcon.classList.remove("fa-user-pen");
        buttonIcon.classList.add("fa-clock");
        saveCurrentInputs(); // Zapisz aktualne wartości inputów przed włączeniem trybu
        saveCurrentAlignments(); // Zapisz aktualne wyrównania przed włączeniem trybu
        refreshAutoMode(); // Uruchamiamy cykliczne odświeżanie, jeśli tryb włączony
    } else {
        buttonIcon.classList.remove("fa-clock");
        buttonIcon.classList.add("fa-user-pen");
        clearAutoModeData(); // Usuwamy wyświetlany tekst i resetujemy ukryte inputy
        restoreSavedInputs(); // Przywracamy poprzednie wartości inputów
        restoreSavedAlignments(); // Przywracamy poprzednie wyrównania
    }

    // Odświeżenie wyświetlacza, aby zmiany były widoczne
    updateDisplay();
}

// Funkcja do wyświetlania czasu w trybie automatycznym
function updateAutoModeDisplay() {
    const hiddenText1 = document.getElementById("hiddenText1");
    const hiddenText2 = document.getElementById("hiddenText2");

    // Pobranie aktualnej daty i godziny
    const now = new Date();
    const hours = now.getHours().toString().padStart(2, "0");
    const minutes = now.getMinutes().toString().padStart(2, "0");
    const dayOfMonth = now.getDate().toString().padStart(2, "0");
    const month = (now.getMonth() + 1).toString().padStart(2, "0"); // Numer miesiąca w formacie 2-cyfrowym
    const year = now.getFullYear().toString().slice(2);
    const dayOfWeek = now.toLocaleString('default', { weekday: 'long' });

    // Aktualizacja tekstu
    hiddenText1.value = `${hours}:${minutes}`;
    hiddenText2.value = `${dayOfWeek}, ${dayOfMonth}.${month}.${year}`;

    // Wymuszenie wyśrodkowanego wyrównania
    currentAlignments[0] = 1;
    currentAlignments[1] = 1;
    updateDisplay(); // Odświeżamy wyświetlacz po ustawieniu tekstów
}

// Funkcja do odświeżania wyświetlacza co minutę, jeśli tryb automatyczny jest aktywowany
function refreshAutoMode() {
    if (isAutoMode) {
        updateAutoModeDisplay(); // Aktualizacja wyświetlacza
        setTimeout(refreshAutoMode, 30000); // Odświeżanie co minutę
    }
}

// Funkcja do czyszczenia wartości ukrytych inputów, kiedy tryb automatyczny jest wyłączony
function clearAutoModeData() {
    const hiddenText1 = document.getElementById("hiddenText1");
    const hiddenText2 = document.getElementById("hiddenText2");

    hiddenText1.value = "";
    hiddenText2.value = "";
    
    // Dodatkowo możemy wyczyścić wyświetlacz
    clearDisplay();
}

// Funkcja do zapisywania aktualnych wartości inputów
function saveCurrentInputs() {
    const hiddenText1 = document.getElementById("hiddenText1");
    const hiddenText2 = document.getElementById("hiddenText2");

    savedText1 = hiddenText1.value;
    savedText2 = hiddenText2.value;
}

// Funkcja do przywracania zapisanych wartości inputów
function restoreSavedInputs() {
    const hiddenText1 = document.getElementById("hiddenText1");
    const hiddenText2 = document.getElementById("hiddenText2");

    hiddenText1.value = savedText1;
    hiddenText2.value = savedText2;
}

// Funkcja do zapisywania aktualnych wyrównań
function saveCurrentAlignments() {
    savedAlignments[0] = currentAlignments[0];
    savedAlignments[1] = currentAlignments[1];
    savedAlignments[2] = currentAlignments[2];
}

// Funkcja do przywracania zapisanych wyrównań
function restoreSavedAlignments() {
    currentAlignments[0] = savedAlignments[0];
    currentAlignments[1] = savedAlignments[1];
    currentAlignments[2] = savedAlignments[2];
}

// Funkcja odświeżająca tylko wybrany (przewijany) wiersz
function updateScrollingRow(row) {
    // Ustalamy pionowy offset wiersza (0 dla wiersza 1, 12 dla wiersza 2, 6 dla wiersza 3)
    let rowOffset = row === 0 ? 0 : (row === 1 ? 12 : 6);
    let rowHeight = 12; // Załóżmy, że każdy wiersz ma 12 pikseli wysokości

    // Czyścimy piksele tylko dla danego wiersza
    for (let r = rowOffset; r < rowOffset + rowHeight; r++) {
        for (let c = 0; c < cols; c++) {
            const index = r * cols + c;
            pixelElements[index].classList.remove("lit", "litCZ", "litWH");
        }
    }

    // Dla wierszy 0 i 1 (odpowiadających wierszom 1 i 2) sprawdzamy, czy włączona jest dodatkowa strefa
    let baseOffset = 0;
    if (row < 2 && extraEnabled[row]) {
         let extraText = document.getElementById("extraText" + (row + 1)).value;
         baseOffset = getTextWidth(extraText, fonts["default"]) + 1;
         // Renderujemy dodatkową strefę w danym wierszu
         renderExtraText(extraText, rowOffset);
    }
    
    // Renderowanie głównego tekstu z uwzględnieniem baseOffset
    if (row === 0) {
        renderRow(0, '', rowOffset, currentAlignments[0], invertedRows[0], baseOffset);
        renderText(scrollingTexts[0], rowOffset, currentAlignments[0], invertedRows[0], scrollOffsets[0], 0, baseOffset);
    } else if (row === 1) {
        renderRow(1, '', rowOffset, currentAlignments[1], invertedRows[1], baseOffset);
        renderText(scrollingTexts[1], rowOffset, currentAlignments[1], invertedRows[1], scrollOffsets[1], 1, baseOffset);
    } else if (row === 2) {
        // Wiersz 3 nie ma dodatkowej strefy, więc baseOffset = 0
        renderRow(2, '', rowOffset, currentAlignments[2], invertedRows[2], 0);
        renderText(scrollingTexts[2], rowOffset, currentAlignments[2], invertedRows[2], scrollOffsets[2], 2, 0);
    }

    // Jeśli globalna inwersja jest włączona, odwracamy tylko ten wiersz
    if (isFullScreenInverted) {
        for (let r = rowOffset; r < rowOffset + rowHeight; r++) {
            for (let c = 0; c < cols; c++) {
                const index = r * cols + c;
                pixelElements[index].classList.toggle("lit");
            }
        }
    }
}

let scrollingIntervals = [null, null, null];
let scrollOffsets = [0, 0, 0];
let scrollingTexts = ["", "", ""];
let originalTexts = ["", "", ""];

function togglePixelScroll(row) {
    const button = document.querySelectorAll(".scroll-button")[row];
    const hiddenText = document.getElementById(`hiddenText${row + 1}`);
    // Dla wierszy 0 i 1, jeżeli dodatkowa strefa jest włączona, ustawiamy effectiveWidth
    let effectiveWidth = cols;
    if (row < 2 && extraEnabled[row]) {
        effectiveWidth = cols - (extraWidths[row] + 1);
    }
    
    if (scrollingIntervals[row]) {
        clearInterval(scrollingIntervals[row]);
        scrollingIntervals[row] = null;
        scrollOffsets[row] = 0;
        button.classList.remove("fa-angles-left");
        button.classList.add("fa-pause");
        hiddenText.value = originalTexts[row];
        updateDisplay();
    } else {
        originalTexts[row] = hiddenText.value;
        scrollingTexts[row] = hiddenText.value;
        let currentCharMap = fonts[currentFonts[row]];
        let textWidth = scrollingTexts[row].split("").reduce((acc, char) =>
            acc + (currentCharMap[char] ? currentCharMap[char][0].length + 1 : 0), 0);

        scrollOffsets[row] = 0;
        scrollingIntervals[row] = setInterval(() => {
            scrollOffsets[row]++;
            if ((effectiveWidth - scrollOffsets[row] + textWidth) <= 2) {
                scrollOffsets[row] = 0;
            }            
            updateScrollingRow(row);
        }, 50);

        button.classList.remove("fa-pause");
        button.classList.add("fa-angles-left");
    }
}




document.querySelectorAll(".scroll-button").forEach((button, index) => {
    button.addEventListener("click", () => togglePixelScroll(index));
});


document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll("input[type='text']").forEach(input => {
        input.addEventListener("input", syncHiddenInputs);
    });
    // Jeśli tryb automatyczny jest włączony, rozpocznij cykliczne odświeżanie
    if (isAutoMode) {
        updateAutoModeDisplay();
        refreshAutoMode();
    }
});

document.addEventListener("DOMContentLoaded", () => {
            document.querySelectorAll("input").forEach(input => {
                input.addEventListener("keydown", event => {
                    if (event.key === "Enter") updateDisplay();
                });
            });
        });

createPixels();
